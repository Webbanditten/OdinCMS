@model KeplerCMS.Data.Models.Rooms

@{
    ViewBag.Title = "Manage room";
    
}
<style>
    /* Fixed table widths */
    .chatlog thead tr th:nth-child(1) {
        width: 20%;
    }
    
    .chatlog thead tr th:nth-child(2) {
        width: 40%;
    }
    
    .chatlog thead tr th:nth-child(3) {
        width: 20%;
    }
    
    .chatlog tbody tr td:nth-child(1) {
        width: 20%;
    }
    
    .chatlog tbody tr td:nth-child(2) {
        width: 40%;
    }
    
    .chatlog tbody tr td:nth-child(3) {
        width: 20%;
    }
</style>
<h1>@ViewBag.Title</h1>
<p>Room details</p>
<table class="habboTable">
    <thead>
    <tr>
        <th>Owner</th>
        <th>Room name and description</th>
        <th>Door mode</th>
        <th>Show owner</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <form class="rooms-inline-form" asp-action="UpdateRoom">
                        
            <td><input name="Id" type="hidden" value="@Model.Id" />
                @if (@Model.Owner != null)
                {
                    <a href="@Url.Action("Manage", "Users", new { id = Model.OwnerId })">@Model.Owner.Username</a>}
                else
                {<text>PUBLIC ROOM</text>}
            </td>
            <td style="padding-right: 10px;">

                <label style="display:block" for="name">Name</label>
                <input style="width: 100%;" type="text" name="Name" value="@Model.Name"/>
                <br/>
                <label style="display:block" for="description">Description</label>
                <input style="width: 100%;" type="text" name="Description" value="@Model.Description"/>

            </td>
            <td style="text-align: center">
                @{
                    var doorModes = new List<SelectListItem>
                    {
                        new SelectListItem { Value = "0", Text = "Open" },
                        new SelectListItem { Value = "1", Text = "Closed" },
                        new SelectListItem { Value = "2", Text = "Code" }
                    };
                }
                            
                <select name="AccessType" asp-for="@Model.AccessType" asp-items="doorModes"></select>
            </td>
            <td style="text-align: center"><input type="checkbox" name="ShowOwner" value="1" @((@Model.ShowOwner == 1) ? "checked" : "") /></td>
            <td style="text-align: center"><input type="submit" value="Save" /></td>
        </form>
    </tr>
    </tbody>
</table>

<h3>Chat log</h3>
<p>Here you can see the chat log of the room, historic logs are delayed by a minute.</p>
<strong>Live</strong>
<table class="habboTable chatlog">
    <thead>
        <tr>
            <th>User</th>
            <th>Message</th>
            <th>Timestamp</th>
        </tr>
    </thead>
</table>
<div style="max-height: 200px; overflow-y: scroll; overflow-x: hidden;">
    <table id="live_chat" class="habboTable chatlog">
        <tbody>
            <!-- Your table rows here -->
        </tbody>
    </table>
</div>
<strong>Historic</strong>
<table class="habboTable chatlog">
    <thead>
        <tr>
            <th>User</th>
            <th>Message</th>
            <th>Timestamp</th>
        </tr>
    </thead>
</table>
<div style="max-height: 200px; overflow-y: scroll; overflow-x: hidden;">
    <table id="historic_chat" class="habboTable chatlog">
        <tbody>
            <!-- Your table rows here -->
        </tbody>
    </table>
</div>
<div style="text-align: right;">
    <a onclick="prevPage()" href="javascript:void(0)">Previous</a> | <a onclick="nextPage()" href="javascript:void(0)">Next</a> | <a onclick="firstPage()" href="javascript:void(0)">First</a>
</div>

@section scripts {
    <script src="~/lib/signalr.js" type="text/javascript"></script>
    
    <script>
        $(document).ready(function() {
            function formatDate(date) {
                const pad = (n) => n < 10 ? `0${n}` : n;
                return date.getDate() + "-" + pad((date.getMonth() + 1)) + "-" + date.getFullYear() + " " + pad(date.getHours()) + ":" + pad(date.getMinutes()) + ":" + pad(date.getSeconds());
            }
            const connection = new signalR.HubConnectionBuilder()
                .withUrl(`/sockets/housekeeping/chatlogs?roomId=@Model.Id`)
                .build();

            connection.on("ReceiveMessage", function (userId, username, message, timestamp) {
                // Add to message to live table 
                
                var msg = $("<tr />").append(
                    // Add link to user profile
                    $("<td />").append($("<a />").attr("href", `@Url.Action("Manage", "Users")/${userId}`).text(username)),
                    $("<td />").text(message),
                    $("<td />").text(formatDate(new Date(timestamp * 1000)))
                );
                
                $("#live_chat").prepend(msg);
            });

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });
            
            
             $(".rooms-inline-form").submit(function (e) {
                e.preventDefault();
                var form = $(this);
                var formData = form.serializeArray();
                var model = {};
            
                $.each(formData, function (index, element) {
                    model[element.name] = element.value;
                });
            
                $.ajax({
                    type: "POST",
                    url: form.attr("action"),
                    contentType: "application/json",
                    data: JSON.stringify(model),
                    success: function (data) {
                        if (data == "success") {
                            Swal.fire({
                                title: 'Success!',
                                text: "Room updated!",
                                icon: 'success',
                                timer: 1500
                            })
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: "Room was not updated! " + data,
                                icon: 'error'
                            })
                        }
                    }
                });
            });
               
             const take = 25;
             let skip = 0;
            
            // Inital load
            function loadHistoric() {
                // Clean table
                $.ajax({
                    type: "GET",
                    url: `@Url.Action("Chatlogs", new { RoomId = Model.Id })&take=${take}&skip=${skip}`,
                    success: function (data) {
                    
                        $("#historic_chat").empty();
                        data.forEach(function (item) {
                            var date = new Date(item.timestamp * 1000); // multiply by 1000 to convert seconds to milliseconds
                            var msg = $("<tr />").append(
                                // Add link to user profile
                                $("<td />").append($("<a />").attr("href", `@Url.Action("Manage", "Users")/${item.userId}`).text(item.username)),
                                $("<td />").text(item.message),
                                $("<td />").text(formatDate(date))
                            );
                            $("#historic_chat").append(msg);
                        });
                    }
                });
            }
            loadHistoric();
            
            nextPage = function() {
                const historic_chat = document.getElementById("historic_chat");
                historic_chat.scrollTop += 200;
                
                // Load from server
                skip += take;
                loadHistoric();
                
                
            }
            prevPage = function() {
                const historic_chat = document.getElementById("historic_chat");
                historic_chat.scrollTop -= 200;
                 if (skip === 0 || skip - take < 0) {
                    skip = 0;
                    return;
                }
                // Load from server
                skip -= take;
                loadHistoric();
            }
            firstPage = function() {
                const historic_chat = document.getElementById("historic_chat");
                historic_chat.scrollTop = 0;
                
                // Load from server
                skip = 0;
                loadHistoric();
            }
        });
    </script>

    
}