@model KeplerCMS.Models.Page;
@{
    var columns = 2;
    switch (Model.Details.Design)
    {
        case "two_small_one_wide":
            columns = 3;
            break;
        default:
            break;
    }
}

<h1>Page Management</h1>
<a href="@Url.Action("Index")" class="back">Back to pages</a>
@if (ViewData["message"] != null)
{
    <div class="message">
        @ViewData["message"]
    </div>
}
@{
    if (Model.Details.DisplayHeader)
    {
        <div class="header"><span>@Model.Details.Name</span></div>
    }
}
@{
    if (Model.Details.News)
    {
        <div class="news"><div class="left">Promos</div><div class="right">News</div></div>
    }
}



<div class="board">

    @{
        for (int i = 1; i - 1 < columns; i++)
        {
            <div class="board-column">
                <div class="board-column-header">Column @i <span><a href="@Url.Action("CreateContainer", "Pages", new { id = Model.Details.Id, column = i })">Add container</a></span></div>
                <div class="board-column-content">
                    @{
                        foreach (var container in Model.Containers.Where(c => c.Column == i).OrderBy(c => c.Order))
                        {
                            <div class="board-item @(container.Hidden ? "hidden-item" : "")" data-id="@container.Id">
                                <div class="board-item-content">
                                    <span>@container.Title</span>
                                    <div class="actions">
                                        <a href="@Url.Action("UpdateContainer", "Pages", new { id = container.Id })">Edit</a> - <a href="#" onclick="removeContainer(@container.Id)">Remove</a>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
</div>

<button type="button" id="save">Save Setup</button>
@section scripts {
    <script src="~/housekeeping/js/muuri.min.js" type="text/javascript"></script>
    <script>
        function removeContainer(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    window.location = "@Url.Action("RemoveContainer")/" + id + "?pageId=@Model.Details.Id";
                }
            })
        }
        $(document).ready(function () {
            var docElem = document.documentElement;
            var board = docElem.querySelector('.board');
            var itemContainers = Array.prototype.slice.call(board.querySelectorAll('.board-column-content'));
            var columnGrids = [];
            var dragCounter = 0;
            var boardGrid;

            itemContainers.forEach(function (container) {

                var muuri = new Muuri(container, {
                    items: '.board-item',
                    layoutDuration: 400,
                    layoutEasing: 'ease',
                    dragEnabled: true,
                    dragSort: function () {
                        return columnGrids;
                    },
                    dragSortHeuristics: {
                        sortInterval: 0,
                        minDragDistance: 0,
                        minBounceBackAngle: 0
                    },
                    dragContainer: document.body,
                    dragReleaseDuration: 400,
                    dragReleaseEasing: 'ease'
                })
                    .on('dragStart', function (item) {
                        ++dragCounter;
                        docElem.classList.add('dragging');
                        item.getElement().style.width = item.getWidth() + 'px';
                        item.getElement().style.height = item.getHeight() + 'px';
                    })
                    .on('dragEnd', function (item) {
                        if (--dragCounter < 1) {
                            docElem.classList.remove('dragging');
                        }
                    })
                    .on('dragReleaseEnd', function (item) {
                        item.getElement().style.width = '';
                        item.getElement().style.height = '';
                        columnGrids.forEach(function (muuri) {
                            muuri.refreshItems();
                        });
                    })
                    .on('layoutStart', function () {
                        boardGrid.refreshItems().layout();
                    });

                columnGrids.push(muuri);

            });

            boardGrid = new Muuri(board, {
                layoutDuration: 400,
                layoutEasing: 'ease',
                dragEnabled: false,
                dragSortHeuristics: {
                    sortInterval: 0,
                    minDragDistance: 0,
                    minBounceBackAngle: 0
                },
                dragStartPredicate: {
                    handle: '.board-column-header'
                },
                dragReleaseDuration: 400,
                dragReleaseEasing: 'ease'
            });


            $("#save").click(function () {
                var gridObj = { PageId: @Model.Details.Id, Columns: [] };
                    columnGrids.map(function (grid, i) {
                        gridObj.Columns.push({
                        Column: i + 1,
                            Containers: grid.getItems().map(item => { return { Id: parseInt(item.getElement().getAttribute('data-id')) } })
                    });
                });
                console.log(gridObj);
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("SaveGrid")",
                    data: JSON.stringify(gridObj),
                    success: function () {
                        Swal.fire({
                            title: 'Saved!',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        });
                    },
                    contentType: "application/json; charset=utf-8"
                });
            });
        });
    </script>
}
