@model KeplerCMS.Models.RegistrationViewModel
@{
    Layout = "_Register";
    ViewData["Title"] = DbRes.T("orange_box_header", "register");
}
@section Steps {
    <div id="steps">
        <img src="~/images/process/step1.gif" alt="1" width="30" height="26">
        <img src="~/images/process/step_right.gif" alt="" width="20" height="26">
        <img src="~/images/process/step2_on.gif" alt="2" width="30" height="26">
        <img src="~/images/process/step_right_on.gif" alt="" width="20" height="26">
        <img src="~/images/process/step3.gif" alt="3" width="30" height="26">
        <img src="~/images/process/step_right.gif" alt="" width="20" height="26">
        <img src="~/images/process/step4.gif" alt="4" width="30" height="26">
        <img src="~/images/process/step_right.gif" alt="" width="20" height="26">
        <img src="~/images/process/step5.gif" alt="4" width="30" height="26">
    </div>
}

<div class="processbox">
    <div class="headline">
        <div class="headline-content">
            <div class="headline-wrapper">
                <h2>@DbRes.T("register_information", "register")</h2>
            </div>
        </div>
    </div>
    <div class="content-top">
        <div class="content">
            <div class="content-column1">
                <div class="bubble">
                    <div class="bubble-body">
                        @DbRes.T("register_information_bubble", "register")
                        <div class="clear"></div>
                    </div>
                </div>
                <div class="bubble-bottom">
                    <div class="bubble-bottom-body">
                        <img src="~/images/register/bubble_tail_left.gif" alt="" width="22" height="31">
                    </div>
                </div>
                <div class="frank"><img src="~/images/register/register3.gif" alt=""></div>
            </div>

            <div class="content-column2">
                <div id="process-errors">
                    <div class="content-red">
                        <div class="content-red-body" id="process-errors-content">
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="content-red-bottom">
                        <div class="content-red-bottom-body"></div>
                    </div>
                </div>
                <div class="content-white-outer">
                    <div class="content-white">
                        <div class="content-white-body">
                            <div class="content-white-content">
                                <div class="content-white-content">
                                    <form method="post" onsubmit="return checkUserAvaliability(this)" action="/register/step/3" id="stepform">
                                        <p>
                                            <b>@DbRes.T("your_habbo_name", "register")</b>
                                            <br>
                                            @DbRes.T("habbo_name_requirements", "register")
                                        </p>

                                        <p>
                                            <label for="required-avatarName" class="registration-text">@DbRes.T("habbo_name", "register")</label>
                                            <br>
                                            <input type="text" name="username" id="username" maxlength="14" value="" class="registration-text required-avatarName required-avatarName-length">
                                        </p>
                                        <div id="usernameStatus" style="display:none" class="field-status-error">
                                            <b>@DbRes.T("habbo_name", "register"): </b> @DbRes.T("habbo_name_used", "register")
                                        </div>
                                        <div id="usernameContainsInvalidChars" style="display:none" class="field-status-error">
                                            <b>@DbRes.T("habbo_name", "register"): </b> @DbRes.T("habbo_name_invalid", "register")
                                        </div>
                                        <hr>

                                        <p>
                                            <b>@DbRes.T("your_password", "register")</b>
                                            <br>
                                            @DbRes.T("password_requirements", "register")
                                        </p>

                                        <p>
                                            <label for="required-password" class="registration-text">@DbRes.T("password", "register")</label><br>
                                            <input type="password" name="password" id="password" maxlength="32" value="" class="registration-text required-password required-password2">
                                        </p>

                                        <div id="pwStatus"></div>

                                        <p>
                                            <label for="required-password" class="registration-text">@DbRes.T("repeat_password", "register")</label><br>
                                            <input type="password" name="retype-password" id="retypedPassword" maxlength="32" value="" class="registration-text required-retypedPassword required-retypedPassword2">
                                        </p>

                                        <div id="pwRetypeStatus"></div>
                                        <div id="register-buttons">
                                            <div id="register-buttons-continue">
                                                <input type="hidden" name="FigureData" value="@Model.FigureData" />
                                                <input type="hidden" name="Gender" value="@Model.Gender" />
                                                <input type="hidden" name="Month" value="@Model.Month" />
                                                <input type="hidden" name="Year" value="@Model.Year" />
                                                <input type="hidden" name="Day" value="@Model.Day" />
                                                <input type="submit" value="@DbRes.T("continue", "register")" id="continuebtn" class="process-button">
                                            </div>
                                            <div class="clear"></div>
                                        </div>

                                    </form>
                                </div>
                            </div>
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="content-white-bottom">
                        <div class="content-white-bottom-body"></div>
                    </div>
                </div>
            </div>
            <div class="clear"></div>
        </div>
    </div>
    <div class="content-bottom"><div class="content-bottom-content"></div></div>
</div>




@section Scripts {
    <script type="text/javascript" language="JavaScript">
        var usernameValid = false;
        function goBack() {
            window.history.back();
        }
        var userValidator = false;

        function resetLabel() {
            userValidator = false;
        }

        function checkUserAvaliability(form) {
            if (document.getElementById('username').value != '') {
                if (userValidator == false) {
                    new Ajax.Request("/api/hotel/habboname_exists", {
                        method: "post", parameters: "habboName=" + encodeURIComponent(form.username.value), onComplete: function (req, text) {
                          console.log(req)
                            j("#usernameStatus").hide();
                            j("#usernameContainsInvalidChars").hide();
                            if (req.responseText == "1") {
                                j("#usernameStatus").show();
                            } else if (req.responseText == "2") { 
                                j("#usernameContainsInvalidChars").show();
                            } else {
                                usernameValid = true;
                                if (pwTotal[0] && pwTotal[2] && usernameValid) {
                                    setTimeout(function () { form.submit(); }, 500);
                                }
                            }
                        }
                    });

                }
            }

            return userValidator;
        }
        function initUserDetailForm() {
            Object.extend(Validation, { addError: validatorAddError });
            Validation.addAllThese([
                ['required-avatarName', '@Html.Raw(DbRes.T("error_habbo_name_length", "register"))', function (v) {
                    return !Validation.get('IsEmpty').test(v);
                }],
                ['required-avatarName-length', '@Html.Raw(DbRes.T("error_habbo_name_length", "register"))', function (v) {
                    return v.length >= 3;
                }],
                ['required-password', '@Html.Raw(DbRes.T("error_password_length", "register"))', function (v) {
                    return !Validation.get('IsEmpty').test(v);
                }],
                ['required-password2', '@Html.Raw(DbRes.T("error_password_length", "register"))', function (v) {
                    return v.length >= 6;
                }],
                ['required-retypedPassword', '@Html.Raw(DbRes.T("error_password_repeat", "register"))', function (v) {
                    return !Validation.get('IsEmpty').test(v);
                }],
                ['required-retypedPassword2', '@Html.Raw(DbRes.T("error_password_no_match", "register"))', function (v) {
                    return v == $F("password");
                }]

            ]);
            new Validation('stepform', { focusOnError: true, beforeSubmit: validatorBeforeSubmit, skipValidation: function () { return backClicked; } });
            initPasswordCheck();

        }
        function initPasswordCheck() {
            updatePasswordStatus(false, true);

            new Form.Element.Observer(
                "password", .7,
                function (element, value) {
                    updatePasswordStatus(false, false);
                }
            );

            new Form.Element.Observer(
                "retypedPassword", .3,
                function (element, value) {
                    updatePasswordStatus(false, false);
                }
            );
        }
        function updatePasswordStatus(remoteCheck, init) {
            var value = $F("password");

            if (!init) {
                if (!value || value.length < 6) {
                    showPasswordLengthMsg("@Html.Raw(DbRes.T("error_password_length", "register"))", "error");
                    pwTotal[0] = false;
                } else {
                    showPasswordLengthMsg("@Html.Raw(DbRes.T("ok_password_length", "register"))", "ok");
                    pwTotal[0] = true;
                }
            }

            if (value.length < 6) {
                if ($("pwChars")) { Element.remove("pwChars"); }
                pwTotal[1] = false;
            } else if (remoteCheck) {
                new Ajax.Request(
                    habboReqPath + "register/password", {
                    method: "get",
                    parameters: "password=" + encodeURIComponent(value),
                    onComplete: showPasswordStatus
                }
                );
            }

            if (!init) {
                var retyped = $F("retypedPassword");
                if (!retyped) {
                    if ($("pwMatch")) {
                        showStatusMsg("pwMatch", "@Html.Raw(DbRes.T("error_password_no_match", "register"))", "error");
                    }
                    pwTotal[2] = false;
                } else if (retyped == $F("password")) {
                    showPasswordMatchMsg("@Html.Raw(DbRes.T("ok_password_match", "register"))", "ok");
                    pwTotal[2] = true;
                    Element.removeClassName($("retypedPassword"), "validation-failed");
                } else {
                    showPasswordMatchMsg("@Html.Raw(DbRes.T("error_password_no_match", "register"))", "error");
                    pwTotal[2] = false;
                }

                updatePasswordTotal();
            }
        }
        function showPasswordLengthMsg(msg, status) {
            var msgNode = $("pwLength");
            if (!msgNode) {
                var node = Builder.node("div", { id: "pwLength", className: "field-status-error" }, [
                    Builder.node("b", "@Html.Raw(DbRes.T("length_check", "register")): "),
                    Builder.node("span", { id: "pwLength-content" })
                ]);
                var charsNode = $("pwChars");
                if (!charsNode) {
                    $("pwStatus").appendChild(node);
                } else {
                    $("pwStatus").insertBefore(node, $("pwChars"));
                }
            }

            showStatusMsg("pwLength", msg, status);
        }
        function showPasswordCharsMsg(msg, status) {
            var msgNode = $("pwChars");
            if (!msgNode) {
                var node = Builder.node("div", { id: "pwChars", className: "field-status-error" }, [
                    Builder.node("b", "@Html.Raw(DbRes.T("character_check", "register")): "),
                    Builder.node("span", { id: "pwChars-content" })
                ]);
                $("pwStatus").appendChild(node);
            }

            showStatusMsg("pwChars", msg, status);
        }
        function showPasswordMatchMsg(msg, status) {
            var msgNode = $("pwMatch");
            if (!msgNode) {
                var node = Builder.node("div", { id: "pwMatch", className: "field-status-error" }, [
                    Builder.node("b", "@Html.Raw(DbRes.T("match_check", "register")): "),
                    Builder.node("span", { id: "pwMatch-content" })
                ]);
                $("pwRetypeStatus").insertBefore(node, $("pwTotal"));
            }

            showStatusMsg("pwMatch", msg, status);
        }
        function updatePasswordTotal() {
            var msgNode = $("pwTotal");
            if (!msgNode) {
                msgNode = $("pwRetypeStatus").appendChild(Builder.node("div", { id: "pwTotal" }));
            }

            if (pwTotal[0] && pwTotal[2]) {
                msgNode.innerHTML = "@Html.Raw(DbRes.T("ok_password_secure", "register"))";
            } else {
                msgNode.innerHTML = "@Html.Raw(DbRes.T("error_password_no_match", "register"))";
            }
        }
        function showPasswordStatus(req, jsonObj) {
            if (jsonObj.charOk) {
                showPasswordCharsMsg(jsonObj.charOk, "ok");
                pwTotal[1] = true;
            } else {
                showPasswordCharsMsg(jsonObj.charErr || "@Html.Raw(DbRes.T("error_password_uppercase_lowercase", "register")) ", "error");
                pwTotal[1] = false;
            }
            updatePasswordTotal();
        }
        initUserDetailForm();
    </script>
}